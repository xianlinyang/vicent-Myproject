make的使用和Makefile的编写
https://www.bilibili.com/video/BV1xt411b7Qu?spm_id_from=333.337.search-card.all.click

makefile是Linux的一种编译脚本，可以帮我们更快更方便的编译C语方项目

target（目标）:dependecies (依赖)
    command (命令)

TARGET:=test_main
OBJS:=test.o main.o    /依赖这两个文件
$(TARGET)  //取TARGET变量的值


main:tool.o
    gcc main.c tool.o -o main
tool.o: tool.c
    gcc -c tool.c    //-c表示把tool.c编译成tool.o 
    
    //这个执行make最终编译顺序是从下往上运行的，因为main引用了tool.o
    
    
\  表示换行
gcc前面必须是tab开头    
    
make执行格式
    make [options][taget]  
    
    
    
shell的通配符 *  ？ [...]    是什么   (任意，单个，范围的字符串)   [abcd]=[a-d]

$? 表示所有比目标新的依赖文件的集合

objects:=$(wildcard *.o)  //表示objects是当前目录下所有.o文件的集合


没有定义依赖的标签称为伪目标
.PHONY就是定义伪目标
.PHONY:clean   这样定义表示不管当前目录下有没有同名为clean的代码文件都不影响
clean：  这样定义会与当前目录下的代码文件名称重名
伪目标总是被执行的

bigoutput littleoutput:text.g     //多目标
$@   表示目前规则中所有的目标的集合


如果要让一条命令的结果应用到下一条命令那么用";"号连接
cd /home/zhanfan;pwd    这样输出/home/zhanfan  不然还是输出makefile所在目录
命令前加  “-”号不管命令是否出错都继续执行

"$$"表示输出一个"$"字符

FOO ?= bar   //表示如果FOO没有被定义过那么就等于bar,否则什么都不做
ifeq ($(origin FOO),undefined)     //origin返回变量FOO的出处  ifeq判断两个参数是否相等
    FOO=bar
endif

objects += another.o   //追加值

makefile函数调用

$(<function> <arguments>)或是 ${<function> <arguments>}
例如：$(subst a,b,$(x)










makefile函数
    subst函数是替换函数  P3节 05分46秒
    patsubst 查找字符串里的单词替换成另一个单词 %号为通配符，如果要使用真正的%号要使用 \%转义
    findstring  <find>,<in>    在in中找find  $(findstring a,a b c)
    filter <pattern...>,<text>   在text中过滤查找
        如：  $(filter %.c,%.s,foo.c bar.c baz.s ugh.h)  返回  foo.c bar.c baz.s      //%为通配符表示匹配所有字符串
    filer-out <pattern...>,<text>  与filter是返的，上面是保留下面是去除
    sort <list>   是排序，按abc顺序排
    word <n>,<text>   最text里的第n个单词    $(word 2,as dd s r)  返回 dd
    wordlist <s>,<e>,<text>   返回textj里从s 到e 有所有单词
    words <text> 单词个数统计
    firstword <text>  取第一个单词
    dir  <names...>  取目录函数 取最后一个/之前的部份，如果没有/就返回 ./ $(dir usr/src/linux/hello.c) 返回 usr/src/linux ./
    notdir <names..> 取出非目录部份   $(notdir usr/src/linux/hello.c) 返回hello.c
    suffix <names...>  从names中取出各个文件名的后缀名  $(suffix /usr/src/linx/makefile hello.c foo.s)  返回 .c .s
    basename <names...> 取出各个文件的前缀部份  $(basename /usr/src/linx/exit.c hello.o home/hacks) 返回 /usr/src/linux/exit hello home/hacks
    addsuffix <suffix>,<namess...>  加后缀   $(addsuffix .c,foo bar hello) 返回foo.c bar.c hello.c
    addprefix <prefix>,<names...>加前缀  $(addprefix usr/src/linx/kernel/,exit.c time.c) 返回 usr/src/linux/kernel/exit.c usr/src/linux/kernel/time.c
    foreach 循环函数和unix标准的/bin/sh for类似
        foreach <var>,<list>,<text>
        表示把参数List中的单词逐一取出放到参数var所指的变量中，然后再执行text所包含的表达式，每一次text会返回一个字符串，循环过程中text的所回的每个字
        符串会以空格分隔，最后当整个循环结束时,text所返回的每个字符串所组成的整个字符串（以空格分隔）将会是foreach函数的返回值，所以var最好是一个变量名
        ，list可以是一个表达式，而text中一般会使用var这个参数来依次枚举list中的单词如
        nammes := a b c d 
        files := $(foreach n,$(names),$(n).0)
        上面的例子中，$(name)中的单词会被挨个取出，并存到变量n中，$(n).o每次根扰$(n)计算出一个值，这些值以空格分隔，最后作为foreach函数的返回值，所以
        $(files)的值是 a.0 b.o c.o d.o
        
    ifeq <arg1>,<arg2> 相等
    ifneq <arg1>,<arg2>    不相等
    ifdef <variable-name>   非空则为真
    ifndef  <variable-name>   为空为真    
    
    
s.%.c  表示以s.开头.c结尾的文件名
makefile中有21个自动化变量 如 $@    